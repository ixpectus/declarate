#!/bin/bash

# Pre-commit hook for declarate project
# This hook runs basic checks before allowing a commit

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo "üîç Running pre-commit checks..."

# Check if we're committing Go files
if git diff --cached --name-only | grep -E '\.(go)$' > /dev/null; then
    echo "üìù Checking Go code formatting..."
    
    # Check formatting
    unformatted=$(git diff --cached --name-only | grep -E '\.(go)$' | xargs gofmt -s -l)
    if [ -n "$unformatted" ]; then
        echo -e "${RED}‚ùå The following files are not formatted correctly:${NC}"
        echo "$unformatted"
        echo -e "${YELLOW}Run 'make fmt' to fix formatting${NC}"
        exit 1
    fi
    
    # Check imports
    if command -v goimports &> /dev/null; then
        unorganized=$(git diff --cached --name-only | grep -E '\.(go)$' | xargs goimports -l)
        if [ -n "$unorganized" ]; then
            echo -e "${RED}‚ùå The following files have import issues:${NC}"
            echo "$unorganized"
            echo -e "${YELLOW}Run 'make fmt' to fix imports${NC}"
            exit 1
        fi
    fi
    
    echo -e "${GREEN}‚úÖ Go code formatting is correct${NC}"
fi

# Check if we're committing YAML files
if git diff --cached --name-only | grep -E '\.(ya?ml)$' > /dev/null; then
    echo "üìù Checking YAML syntax..."
    
    yaml_files=$(git diff --cached --name-only | grep -E '\.(ya?ml)$')
    for file in $yaml_files; do
        if ! python3 -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null; then
            echo -e "${RED}‚ùå YAML syntax error in $file${NC}"
            exit 1
        fi
    done
    
    echo -e "${GREEN}‚úÖ YAML syntax is correct${NC}"
fi

# Check for common issues
echo "üîç Checking for common issues..."

# Check for console.log, fmt.Print in non-test files
if git diff --cached --name-only | grep -E '\.go$' | grep -v '_test\.go$' | xargs grep -l "fmt\.Print\|log\.Print" 2>/dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Found fmt.Print or log.Print in non-test files. Consider using structured logging.${NC}"
fi

# Check for TODO/FIXME in committed code
if git diff --cached | grep -E '^+.*TODO|^+.*FIXME' > /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Found TODO/FIXME in committed code. Consider creating issues for these.${NC}"
fi

echo -e "${GREEN}‚úÖ Pre-commit checks passed${NC}"
